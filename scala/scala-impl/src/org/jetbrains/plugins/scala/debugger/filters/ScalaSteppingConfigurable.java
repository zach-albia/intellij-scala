package org.jetbrains.plugins.scala.debugger.filters;

import com.intellij.openapi.options.ConfigurableUi;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class ScalaSteppingConfigurable implements ConfigurableUi<ScalaDebuggerSettings> {
    private JCheckBox myAlwaysSmartStepInto;
    private JCheckBox myIgnoreScalaMethods;
    private JPanel myPanel;

    @Override
    public void reset(@NotNull ScalaDebuggerSettings settings) {
        myIgnoreScalaMethods.setSelected(settings.DEBUG_DISABLE_SPECIFIC_SCALA_METHODS);
        myAlwaysSmartStepInto.setSelected(settings.ALWAYS_SMART_STEP_INTO);
    }

    @Override
    public boolean isModified(@NotNull ScalaDebuggerSettings settings) {
        return settings.ALWAYS_SMART_STEP_INTO != myAlwaysSmartStepInto.isSelected() ||
                settings.DEBUG_DISABLE_SPECIFIC_SCALA_METHODS != myIgnoreScalaMethods.isSelected();
    }

    @Override
    public void apply(@NotNull ScalaDebuggerSettings settings) throws ConfigurationException {
        settings.ALWAYS_SMART_STEP_INTO = myAlwaysSmartStepInto.isSelected();
        settings.DEBUG_DISABLE_SPECIFIC_SCALA_METHODS = myIgnoreScalaMethods.isSelected();
    }

    @NotNull
    @Override
    public JComponent getComponent() {
        return myPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myPanel = new JPanel();
        myPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        myPanel.setEnabled(true);
        myAlwaysSmartStepInto = new JCheckBox();
        this.$$$loadButtonText$$$(myAlwaysSmartStepInto, this.$$$getMessageFromBundle$$$("messages/DebuggerBundle", "label.debugger.general.configurable.always.smart.step.into"));
        myPanel.add(myAlwaysSmartStepInto, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        myPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        myIgnoreScalaMethods = new JCheckBox();
        myIgnoreScalaMethods.setSelected(false);
        this.$$$loadButtonText$$$(myIgnoreScalaMethods, this.$$$getMessageFromBundle$$$("messages/ScalaBundle", "scala.debug.disable.specific.methods"));
        myPanel.add(myIgnoreScalaMethods, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myPanel;
    }

}
